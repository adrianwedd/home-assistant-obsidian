name: Build Custom Obsidian Container

on:
  push:
    paths:
      - 'container/**'
      - '.github/workflows/build-container.yml'
  pull_request:
    paths:
      - 'container/**'
      - '.github/workflows/build-container.yml'
  schedule:
    # Weekly builds on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      obsidian_version:
        description: 'Obsidian version to build (e.g., v1.8.10)'
        required: false
        default: 'v1.8.10'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/obsidian-ha

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY.MM.DD'}},enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./container
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            OBSIDIAN_VERSION=${{ github.event.inputs.obsidian_version || 'v1.8.10' }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test container startup
        run: |
          # Pull the built image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          # Run container in test mode
          docker run --rm -d \
            --name obsidian-test \
            -p 3000:3000 \
            -e PUID=1000 \
            -e PGID=1000 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          # Wait for container to start
          sleep 30

          # Test health endpoint
          curl -f http://localhost:3000/health || exit 1

          # Check if Obsidian process is running
          docker exec obsidian-test pgrep -f Obsidian || exit 1

          # Stop test container
          docker stop obsidian-test

          echo "âœ… Container test passed!"

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
